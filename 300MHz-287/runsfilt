#!/usr/bin/python

import sys
import time
import os
import subprocess
import socket
import argparse
from string import find
from datetime import date

class student:
  def __init__(self):
    name=""
    last4=""

files = []
students = []
resfile=0

def getfnx():
  strx=raw_input("verilog file name with .v (enter if done) ").strip()
  return strx

def getfiles(fn):
  if(os.path.isfile(fn)):
    fs = open(fn,"r")
    for ln in fs.readlines():
      ln = ln.strip()
      files.append(ln)
    fs.close()
  else:
    fs = open(fn,"w")
    print("\n\nEnter the file names in descending hierarchy order.")
    while(True):
      strx = getfnx()
      if(strx==""):
        break
      fs.write("{0}\n".format(strx))
      files.append(strx)
    fs.close()
    
def getstudents(fn):
  if(os.path.isfile(fn)):
    fs = open(fn,"r")
    for ln in fs.readlines():
      recs=ln.split("^")
      stud = student()
      stud.name=recs[1]
      stud.last4=recs[2]
      students.append(stud)
    fs.close()
  else:
    fs = open(fn,"w")
    namex = raw_input( "\n\nEnter student Name").strip()
    last4 = raw_input("Enter the last 4 of the SJSU ID ").strip()
    fs.write("^{0}^{1}^\n".format(namex,last4))
    stud = student()
    stud.name = namex
    stud.last4 = last4
    students.append(stud)
    fs.close()


  
###################################################
# create the test bench                           #
###################################################
def maketb(tbname,debug,mgates,clkperiod):
  ft = open(tbname,"w")
  ft.write("""// This is a simple testbench for the serial filter (sfilt.v)
//
//
`timescale 1ns/10ps
""")
  ft.write("// Generated on ")
  ft.write(str(time.asctime()) )
  ft.write("/n")
  if(mgates):
    ft.write("// Gate level simulation test bench only\n")
  ft.write("// Generated for student\n")
  for qq in students:
    ft.write("//    {0} {1}\n".format(qq.name,qq.last4))
  ft.write("""
// cmd codes
// 0 = first mult
// 1 = mult-accumulate
// 2 = shift right by h[6:0] and round
// 3 = send output and clear

module tbsfilt();
reg clk,rst,pushin;
reg [1:0] cmd;
integer q,h;
wire pushout;
wire [31:0] z;
reg [31:0] expected[$];
reg [31:0] expr;
reg signed [63:0] acc;

reg debug=""")
  if(debug):
    ft.write("1;")
  else:
    ft.write("0;")
  ft.write("""
default clocking clk1 @(posedge(clk));

endclocking

class mkfv;
  rand integer q,h;
  rand reg [1:0] dly ;
endclass

class tst;
  mkfv mk;
  rand reg [10:0] numtodo;
  bit withround;
  rand integer roundamt;
  reg withResult;
  reg roundbit;
  
  constraint roundsize { roundamt >0 && roundamt < 63; }
  constraint numlimit { numtodo > 0 && numtodo < 512; }
  
  function new();
    begin
      mk = new();
    end
  endfunction
  task setqh(input reg [1:0] cx);
   begin
    mk.randomize();
    case(cx)
      0: acc=mk.q*mk.h;
      1: acc=acc+mk.q*mk.h;
      2: begin
          {acc,roundbit} = {acc,1'b0} >>> roundamt;
          acc = acc+roundbit;
         end
      3: begin
          acc=0;
         end
    endcase
    cmd= #1 cx;
    q= #1 mk.q;
    h=#1 (cx==2)?roundamt:mk.h;
    pushin=#1 1;
    ##1;
    pushin=#1 0;
    randcase
      75: mk.dly=0;
      10: mk.dly=1;
      10: mk.dly=2;
      3:  mk.dly=3;
      2:  mk.dly=5;
    endcase
    repeat(mk.dly) ##1;
   end
  endtask
  task make1test();
    randomize();
    setqh(0);
    repeat(numtodo-1) begin
      setqh(1);
    end
    randcase
      75: withround=1;
      25:  withround=0;
    endcase
    if(withround) begin
      setqh(2);
    end
    randcase 
      95: withResult=1;
       5: withResult=0;
    endcase
    if(withResult) begin
      expected.push_back(acc[31:0]);
      setqh(3);
    end
  endtask
endclass

tst t1=new();

task doatest;
  t1.make1test();
begin

end
endtask


initial begin
  if(debug) begin
    $dumpfile("sfilt.vcd");
    $dumpvars(9,tbsfilt);
  end
  clk=1;
  cmd=0;
  q=0;
  h=0;
  pushin=0;
""")
  ft.write("  forever #{0} clk=~clk; // calc clock\n".format(float(clkperiod)/2.0))
  ft.write("""end


task death(input string s);
  begin
    $display("\\n\\n\\n=-=-=-=-=-=-=-=-ERROR-=-=-=-=-=-=-=-=-=-=-=-=-=-");
    $display(s);
    $display("=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\\n\\n\\n");
    #10;
    $finish;
  end
endtask

always @(posedge(clk)) begin
   #0.7;
   if( ! rst) begin
     if(pushout===1'bx) begin
       death("Pushout is an 'X'");
     end
     if(pushout===1) begin
       if(expected.size() < 1) begin
         death("You pushed when I wasn't expecting any output");
       end
       expr = expected.pop_front();
       if(expr !== z) begin
         $display("\\n\\n\\n Expecting %h got %h",expr,z);
         death("Results error");
       end
     end
   end
   
end

initial begin
  rst=1;
  ##3;
  #1 rst=0;
  ##2;
""")
  if(mgates):
    ft.write("  repeat(50) doatest;\n");
  else:
    ft.write("  repeat(5000) doatest;\n");
  ft.write("""  ##20;
  if(expected.size() > 0) begin
    death("Test finished, and you didn't push everything");
  end
  $display("\\n\\n\\nWe passed the test, happy happy :)\\n\\n\\n");
  $finish;
end

sfilt sf(clk,rst,pushin,cmd,q,h,pushout,z);



endmodule
""") 
  ft.close()

###############################
# copies a file if needed     #
###############################
def copyifneeded(localfile,remotefile):
  if(os.path.isfile(localfile)):
    return
  print("\nCopying {0} to local directory".format(str(localfile)))
  cmd = ["cp", str(remotefile), str(localfile) ]
  subprocess.call(cmd)
####################################
# checks to see if a file contains #
# any substrings passed            #
####################################
def filehasany(fn,stx):
  rv = False
  if(os.path.isfile(fn)):
    fw = open(fn,"r")
    for ln in fw.readlines():
      for sub in stx:
        if( find(ln.lower(),sub)>= 0 ):
          print "-->",ln.strip(),"<--"
          rv=True
  return rv

###############################
# checks to see if a file has #
# a string                    #
###############################
def filehas(fn,stx):
  if(os.path.isfile(fn)):
    fw = open(fn,"r")
    for ln in fw.readlines():
      if( find(ln,stx)>=0 ):
        print "-->",ln.strip(),"<--"
        fw.close()
        return True
    fw.close()
  return False
##############################
# run vcs simulation         #
##############################
def runvcs(debopt):
  ff = open("files.f","w")
  ff.write("tbsfilt.sv\n")
  for lx in reversed(files):
    ff.write("{0}\n".format(lx))
  ff.close()
  deb=1 if(debopt) else 0
  maketb("tbsfilt.sv",deb,False,10)
  
  subprocess.call(["rm","-rf","simres.txt","simv"])
  subprocess.call(["csh","-c","./sv_vcs -f files.f | tee simres.txt"])
  if(filehas("simres.txt","We passed the test, happy happy :)")):
    if(debopt):
      resfile.write("debug {0} \n".format(debopt))
    resfile.write("VCS simulation worked\n");
    print "\n\n\n------ VCS simulation worked \n\n\n"
  else:
    resfile.write("VCS FAILED TO WORK\n")
    print "\n\n\nVCS Failed to work\n\n"
    resfile.close()
    exit()
##############################
# run ncverilog simulation   #
##############################
def runnc(debopt):
  ff = open("files.f","w")
  ff.write("tbsfilt.sv\n")
  for lx in reversed(files):
    ff.write("{0}\n".format(lx))
  ff.close()
  deb=1 if(debopt) else 0
  maketb("tbsfilt.sv",deb,False,10)
  print "\n\n    Starting NC verilog \n\n"
  subprocess.call(["rm","-rf","simres.txt"])
  subprocess.call(["csh","-c","./sv_nc -f files.f | tee simres.txt"])
  if(filehas("simres.txt","We passed the test, happy happy :)")):
    if(debopt):
      resfile.write("debug {0} \n".format(debopt))
    resfile.write("NCverilog simulation worked\n");
    print "\n\n\n------ NCverilog simulation worked \n\n\n"
  else:
    resfile.write("NCverilog FAILED TO WORK\n")
    print "\n\n\nNCVerilog failed to work\n\n"
    resfile.close()
    exit()
##############################
# run ncverilog gate sim     #
##############################
def rungates(debopt,clkperiod):
  ff = open("files.f","w")
  ff.write("tbsfilt.sv\nsfilt_gates.v")
  ff.close()
  deb=1 if(debopt) else 0
  maketb("tbsfilt.sv",deb,True,clkperiod*2.5)
  print "\n\n    Starting NC verilog gate level simulation\n\n"
  subprocess.call(["rm","-rf","simres.txt"])
  subprocess.call(["csh","-c","./sv_ncgates -f files.f | tee simres.txt"])
  if(filehas("simres.txt","We passed the test, happy happy :)")):
    if(debopt):
      resfile.write("debug {0}\n".format(debopt))
    resfile.write("Gate level simulation worked\n");
    print "\n\n\n------ Gate level simulation worked \n\n\n"
  else:
    resfile.write("Gates FAILED TO WORK\n")
    print "\n\n\nGates failed to work\n\n"
    resfile.close()
    exit()
#####################################
# makes a synthesis script of the things
#####################################
def makeSynScript(fn,clkx):
  clkperiod = float(clkx);
  fs = open(fn,"w")
  fs.write("""set link_library {/apps/toshiba/sjsu/synopsys/tc240c/tc240c.db_NOMIN25 /apps/synopsys/I-2013.12-SP5/libraries/syn/dw_foundation.sldb}
set target_library {/apps/toshiba/sjsu/synopsys/tc240c/tc240c.db_NOMIN25}
""")
  for fnx in reversed(files):
    if(not (find(fnx,"DW02")>=0) ):
      fs.write("read_verilog {0}\n".format(fnx))
      fs.write("create_clock clk -name clk -period {0}\n".format(clkperiod*0.70))
      fs.write("""set_propagated_clock clk
set_clock_uncertainty 0.25 clk
set_propagated_clock clk
set_output_delay 0.5 -clock clk [all_outputs]
set all_inputs_wo_rst_clk [remove_from_collection [remove_from_collection [all_inputs] [get_port clk]] [get_port rst]]
set_driving_cell -lib_cell CND2X1 $all_inputs_wo_rst_clk
set_input_delay 0.6 -clock clk $all_inputs_wo_rst_clk
set_output_delay 0.6 -clock clk [all_outputs]
set_fix_hold [ get_clocks clk ]
""")
      fs.write("set_output_delay 0.3 -clock clk [all_outputs]\n")
      fs.write("compile_ultra\n")
      fs.write("create_clock clk -name clk -period {0}\n".format(clkperiod))
      fs.write("""
update_timing
report_timing -max_paths 3
""")
  fs.write("""write -hierarchy -format verilog -output sfilt_gates.v
""")
  fs.write("quit\n")
  fs.close()
    
#####################################
# run the synopsys synthesizer      #
#####################################
def runsynthesis(clkperiod):
  makeSynScript("synthesis.script",clkperiod)
  fq = open("sss","w")
  fq.write("""#!/usr/bin/csh
source design_ssc.csh
which dc_shell
dc_shell -f synthesis.script | tee synres.txt
""")
  fq.close()
  subprocess.call(["chmod","+x","sss"])
  subprocess.call(["rm","-f","synres.txt"])
  subprocess.call(["./sss"])
  if( not os.path.isfile("synres.txt") ):
    resfile.write("///// Synthesis failed to produce results /////\n")
    print "\n\nNo synthesis results\n\n"
    exit()
  if( filehasany("synres.txt",["error","latch","violated","timing arc"]) ):
    resfile.write("///// Synthesis failed /////\n");
    print "\n\nsynthesis failed\n\n"
    exit()
  resfile.write("Synthesis finished OK\n")
####################################
# The main routine                 #
####################################
def mainx():
  clkperiod=3.3
  resfn="results.txt"

  parser = argparse.ArgumentParser(description='200/300 Mhz homework')
  parser.add_argument("-s","--synthesis",dest="synthesis",default=False,help="only run synthesis",action="store_true");
  parser.add_argument("--nogates",dest="nogates",default=False,help="No gate level simulation", action="store_true")
  parser.add_argument("-d","--debug",dest="debug",default=False,help="Debug mode",action="store_true")
  parser.add_argument("-g","--gates",dest="gates",default=False,help="just simulate gates",action="store_true")
  parser.add_argument("clkperiod",default=5)
  parser.add_argument("resultsFileName",default="results.txt")
  args = parser.parse_args()
  print args
#  return
  if(find(args.resultsFileName,".v")>0 or args.resultsFileName.find(".sv")>0):
    print("the second argument should be the result name\n")
    print("Not a design file name")
    return
  resfn=args.resultsFileName
  clkperiod=float(args.clkperiod)
  global resfile
  resfile = open(resfn,"w")
  resfile.write("sfilt script run started on {0}\n".format(str(time.asctime())))
  resfile.write("run on machine {0}\n\n".format(socket.gethostname()))
  resfile.write("Run with a clock period of {0}\n".format(clkperiod));
  
  getstudents("names.txt")
  print "student names"
  resfile.write("student names\n");
  for sx in students:
    print " ",sx.name,sx.last4
    resfile.write("  {0}  {1}\n".format(sx.name,sx.last4))
  getfiles("files.txt")
  print "user design files"
  for sx in files:
    print " ",sx
  copyifneeded("sv_vcs","/home/morris/sfilt/sv_vcs")
  copyifneeded("sv_nc","/home/morris/sfilt/sv_nc")
  copyifneeded("sv_ncgates","/home/morris/sfilt/sv_ncgates")
  copyifneeded("design_ssc.csh","/home/morris/sfilt/design_ssc.csh")
  print "options syn {0} gates {1}".format(args.synthesis,args.gates)
  resfile.write( "options syn {0} gates {1}\n".format(args.synthesis,args.gates))
  if(not (args.synthesis or args.gates) ):
    runvcs(args.debug)
    runnc(args.debug)
  if( not (args.gates) ):
    runsynthesis(clkperiod)
  if( not (args.nogates) ):
    rungates(args.debug,clkperiod)
  if(args.synthesis or args.gates or args.nogates):
    resfile.write("--->> Partial run, do not submit for credit <<--\n")
    print "--->> Partial run, do not submit for credit <<--\n"
    resfile.close()
    exit()
  resfile.write("Completed the sfilt run\n")
  print("\n\n\nCompleted the sfilt run\n\n")
  resfile.close()

mainx()
