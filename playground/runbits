#!/usr/bin/python

import sys
import time
import os
import subprocess
import socket
import argparse
from string import find
from datetime import date

class student:
  def __init__(self):
    name=""
    last4=""

files = []
students = []
resfile=0

def getfnx():
  strx=raw_input("verilog file name with .v (enter if done) ").strip()
  return strx

def getfiles(fn):
  if(os.path.isfile(fn)):
    fs = open(fn,"r")
    for ln in fs.readlines():
      ln = ln.strip()
      files.append(ln)
    fs.close()
  else:
    fs = open(fn,"w")
    print("\n\nEnter the file names in descending hierarchy order.")
    while(True):
      strx = getfnx()
      if(strx==""):
        break
      fs.write("{0}\n".format(strx))
      files.append(strx)
    fs.close()
    
def getstudents(fn):
  if(os.path.isfile(fn)):
    fs = open(fn,"r")
    for ln in fs.readlines():
      recs=ln.split("^")
      stud = student()
      stud.name=recs[1]
      stud.last4=recs[2]
      students.append(stud)
    fs.close()
  else:
    fs = open(fn,"w")
    namex = raw_input( "\n\nEnter student Name").strip()
    last4 = raw_input("Enter the last 4 of the SJSU ID ").strip()
    fs.write("^{0}^{1}^\n".format(namex,last4))
    stud = student()
    stud.name = namex
    stud.last4 = last4
    students.append(stud)
    fs.close()


  
###################################################
# create the test bench                           #
###################################################
def maketb(tbname,debug,mgates,clkperiod):
  ft = open(tbname,"w")
  ft.write("""// A simple test bench for the bits assignment
//
`timescale 1ns/10ps

module test;

reg clk,rst,pushin;
reg [31:0] datain;
reg reqin;
reg [3:0] reqlen;
wire pushout;
wire [3:0] lenout;
wire [14:0] dataout;

reg pushout0;
reg [3:0] lenout0;
reg [14:0] dataout0;
reg draining;
reg filling;
int bitsleft;

reg running=0;

reg debug=""")
  if(debug):
    ft.write("1")
  else:
    ft.write("0")
  ft.write(""";

default clocking tclk @(posedge(clk)) ;
  
endclocking

typedef struct {
	reg[3:0] len;
	reg[14:0] data;
} sexp;

sexp fexp[$];

sexp exp;

task death(input string s);
  begin
    $display();
    $display();
    $display(s);
    $display();
    $display();
    $error(":-( :-( :-( ended with error");
    $display();
    $display();
    $finish;
  end
endtask

class rt;

rand reg Xpushin;
rand reg [31:0] Xdatain;
rand reg Xreqin;
rand reg [3:0] Xreqlen;
rand reg [8:0] Xdrain;
rand reg [8:0] Xfill;

reg [14:0] expdata;

reg [31*32-1:0] wk;

constraint c1 {
  Xpushin dist {
    0 := 20-19*filling,
    1 := 3  
  };
}
constraint c2 {
  Xreqlen <= bitsleft;
}


function new();
  begin
    bitsleft=0;
    wk=0;
    draining=0;
    filling=0;
  end
endfunction


task apply;
integer ix;
sexp se;
  begin
    if( bitsleft > (30*32-1) ) begin
      Xpushin=0;
    end
    if(bitsleft < Xreqlen) begin
      Xreqin=0;
    end
    if(filling) begin
      if(bitsleft < 29*32) Xreqin=0; else filling=0;
    end else if(draining) begin
      if(bitsleft > 0) Xpushin=0;
      if(bitsleft == 0) draining=0;
    end else begin
      if( Xdrain == 123 ) draining=1;
      else if(Xfill == 123) filling=1;
    end
    ##1 #1;
    pushin = Xpushin;
    datain = Xdatain;
    reqin = Xreqin;
    reqlen = Xreqlen;
    if(Xpushin) begin
      for(ix=bitsleft; ix < bitsleft+32; ix=ix+1) wk[ix]=Xdatain[ix-bitsleft];
//      wk[bitsleft+31:bitsleft]=Xdatain;
      bitsleft += 32;
      if(debug) $display("Pushing %08h",Xdatain);
    end
    if(Xreqin) begin
      expdata=wk[14:0];
      expdata &= ~(16'hffff << Xreqlen);
      se.len = Xreqlen;
      se.data=expdata;
      if(debug) $display("requesting %d bits, expecting %04h",Xreqlen,expdata);
      fexp.push_back(se);
      bitsleft -= Xreqlen;
      wk = wk >> Xreqlen;
    end
  end
endtask

task alldone;
begin
  if(fexp.size() > 0) begin
    death("You did not push out the last request within 20 clocks");
    $finish;
  end
end
endtask

endclass

rt t=new();

bits b(clk,rst,pushin, datain, reqin, reqlen, pushout, lenout, dataout);

initial begin
clk=0;
forever #""")
  ft.write("{0}".format(float(clkperiod/2.0)) )
  ft.write(""" clk=~clk;
end

initial begin
  #1;
  if(debug) begin
    $dumpfile("bits.vcd");
    $dumpvars(9,test);
  end
end

initial begin
rst=0;
pushin=0;
datain=0;
reqin=0;
reqlen=0;
##1 #1;
rst=1;
##5 #1;
rst=0;
##1 ;
running=1;
repeat(500""")
  if(mgates==False):
    ft.write("00")
  ft.write(""") begin
  t.randomize;
  t.apply;
end
##1 #1;
pushin=0;
reqin=0;
##20 #1;
t.alldone;
$display();
$display();
$display("all done with a smile");
$display();
$display();
$finish();
end

always @(posedge(clk)) begin
  if(running) begin
    pushout0=pushout;
    lenout0=lenout;
    dataout0=dataout;
    #0.02;
    if(pushout0 !== pushout) death("No hold time on pushout");
    if(lenout0 !== lenout) death("No hold time on lenout");
    if(dataout0 !== dataout) death("no hold time on dataout");
    if(pushout !== 0 && pushout !==1) death("X or Z on pushout");
    if(pushout) begin
      if(fexp.size() < 1) death("You pushed, and I am not expecting anything");
      exp = fexp.pop_front();
      if(lenout !== exp.len) begin
        $display();
        $display();
        $display("Length error --- Recv %h Exp %h",lenout,exp.len);
        death("length received in error");
      end
      if(dataout !== exp.data) begin
        $display();
        $display();
        $display("Data error --- Recv %h Exp %h",dataout,exp.data);
        death("Data received error");
      end
    end
  end
end



endmodule
""") 
  ft.close()

###############################
# copies a file if needed     #
###############################
def copyifneeded(localfile,remotefile):
  if(os.path.isfile(localfile)):
    return
  print("\nCopying {0} to local directory".format(str(localfile)))
  cmd = ["cp", str(remotefile), str(localfile) ]
  subprocess.call(cmd)
####################################
# checks to see if a file contains #
# any substrings passed            #
####################################
def filehasany(fn,stx):
  rv = False
  if(os.path.isfile(fn)):
    fw = open(fn,"r")
    for ln in fw.readlines():
      for sub in stx:
        if( find(ln.lower(),sub)>= 0 ):
          print "-->",ln.strip(),"<--"
          rv=True
  return rv

###############################
# checks to see if a file has #
# a string                    #
###############################
def filehas(fn,stx):
  if(os.path.isfile(fn)):
    fw = open(fn,"r")
    for ln in fw.readlines():
      if( find(ln,stx)>=0 ):
        print "-->",ln.strip(),"<--"
        fw.close()
        return True
    fw.close()
  return False
##############################
# run vcs simulation         #
##############################
def runvcs(debopt):
  ff = open("files.f","w")
  ff.write("tbits.sv\n")
  for lx in reversed(files):
    ff.write("{0}\n".format(lx))
  ff.close()
  deb=1 if(debopt) else 0
  maketb("tbits.sv",deb,False,10)
  
  subprocess.call(["rm","-rf","simres.txt","simv"])
  subprocess.call(["csh","-c","./sv_vcs -f files.f | tee simres.txt"])
  if(filehas("simres.txt","all done with a smile")):
    if(debopt):
      resfile.write("debug {0} \n".format(debopt))
    resfile.write("VCS simulation worked\n");
    print "\n\n\n------ VCS simulation worked \n\n\n"
  else:
    resfile.write("VCS FAILED TO WORK\n")
    print "\n\n\nVCS Failed to work\n\n"
    resfile.close()
    exit()
##############################
# run ncverilog simulation   #
##############################
def runnc(debopt):
  ff = open("files.f","w")
  ff.write("tbits.sv\n")
  for lx in reversed(files):
    ff.write("{0}\n".format(lx))
  ff.close()
  deb=1 if(debopt) else 0
  maketb("tbits.sv",deb,False,10)
  print "\n\n    Starting NC verilog \n\n"
  subprocess.call(["rm","-rf","simres.txt"])
  subprocess.call(["csh","-c","./sv_nc -f files.f | tee simres.txt"])
  if(filehas("simres.txt","all done with a smile")):
    if(debopt):
      resfile.write("debug {0} \n".format(debopt))
    resfile.write("NCverilog simulation worked\n");
    print "\n\n\n------ NCverilog simulation worked \n\n\n"
  else:
    resfile.write("NCverilog FAILED TO WORK\n")
    print "\n\n\nNCVerilog failed to work\n\n"
    resfile.close()
    exit()
##############################
# run ncverilog gate sim     #
##############################
def rungates(debopt,clkperiod):
  ff = open("files.f","w")
  ff.write("tbits.sv\nbits_gates.v")
  ff.close()
  deb=1 if(debopt) else 0
  maketb("tbits.sv",deb,True,clkperiod*2.5)
  print "\n\n    Starting NC verilog gate level simulation\n\n"
  subprocess.call(["rm","-rf","simres.txt"])
  subprocess.call(["csh","-c","./sv_ncgates -f files.f | tee simres.txt"])
  if(filehas("simres.txt","all done with a smile")):
    if(debopt):
      resfile.write("debug {0}\n".format(debopt))
    resfile.write("Gate level simulation worked\n");
    print "\n\n\n------ Gate level simulation worked \n\n\n"
  else:
    resfile.write("Gates FAILED TO WORK\n")
    print "\n\n\nGates failed to work\n\n"
    resfile.close()
    exit()
#####################################
# makes a synthesis script of the things
#####################################
def makeSynScript(fn,clkx):
  clkperiod = float(clkx);
  fs = open(fn,"w")
  fs.write("""set link_library {/apps/toshiba/sjsu/synopsys/tc240c/tc240c.db_NOMIN25 /apps/synopsys/I-2013.12-SP5/libraries/syn/dw_foundation.sldb}
set target_library {/apps/toshiba/sjsu/synopsys/tc240c/tc240c.db_NOMIN25}
""")
  for fnx in reversed(files):
    if(not (find(fnx,"DW02")>=0) ):
      fs.write("read_verilog {0}\n".format(fnx))
      fs.write("create_clock clk -name clk -period {0}\n".format(clkperiod*0.75))
      fs.write("""set_propagated_clock clk
set_clock_uncertainty 0.25 clk
set_propagated_clock clk
set_output_delay 0.5 -clock clk [all_outputs]
set all_inputs_wo_rst_clk [remove_from_collection [remove_from_collection [all_inputs] [get_port clk]] [get_port rst]]
set_driving_cell -lib_cell CND2X1 $all_inputs_wo_rst_clk
set_input_delay 0.6 -clock clk $all_inputs_wo_rst_clk
set_output_delay 0.6 -clock clk [all_outputs]
set_fix_hold [ get_clocks clk ]
""")
    fs.write("set_output_delay 0.3 -clock clk [all_outputs]\n")
    fs.write("compile -map_effort high\n")
    fs.write("create_clock clk -name clk -period {0}\n".format(clkperiod))
    fs.write("""
update_timing
report_timing -max_paths 3
""")
  fs.write("""write -hierarchy -format verilog -output bits_gates.v
""")
  fs.write("quit\n")
  fs.close()
    
#####################################
# run the synopsys synthesizer      #
#####################################
def runsynthesis(clkperiod):
  makeSynScript("synthesis.script",clkperiod)
  fq = open("sss","w")
  fq.write("""#!/usr/bin/csh
source design_ssc.csh
which dc_shell
dc_shell -f synthesis.script | tee synres.txt
""")
  fq.close()
  subprocess.call(["chmod","+x","sss"])
  subprocess.call(["rm","-f","synres.txt"])
  subprocess.call(["./sss"])
  if( not os.path.isfile("synres.txt") ):
    resfile.write("///// Synthesis failed to produce results /////\n")
    print "\n\nNo synthesis results\n\n"
    exit()
  if( filehasany("synres.txt",["error","latch","violated","timing arc"]) ):
    resfile.write("///// Synthesis failed /////\n");
    print "\n\nsynthesis failed\n\n"
    exit()
  resfile.write("Synthesis finished OK\n")
####################################
# The main routine                 #
####################################
def mainx():
  clkperiod=3.3
  resfn="results.txt"

  parser = argparse.ArgumentParser(description='bits homework')
  parser.add_argument("-s","--synthesis",dest="synthesis",default=False,help="only run synthesis",action="store_true");
  parser.add_argument("--nogates",dest="nogates",default=False,help="No gate level simulation", action="store_true")
  parser.add_argument("-d","--debug",dest="debug",default=False,help="Debug mode",action="store_true")
  parser.add_argument("-g","--gates",dest="gates",default=False,help="just simulate gates",action="store_true")
  parser.add_argument("--clkperiod",default=5.0)
  parser.add_argument("resultsFileName",default="results.txt")
  args = parser.parse_args()
  print args
#  return
  if(find(args.resultsFileName,".v")>0 or args.resultsFileName.find(".sv")>0):
    print("the second argument should be the result name\n")
    print("Not a design file name")
    return
  resfn=args.resultsFileName
  clkperiod=float(args.clkperiod)
  global resfile
  resfile = open(resfn,"w")
  resfile.write("bits script run started on {0}\n".format(str(time.asctime())))
  resfile.write("run on machine {0}\n\n".format(socket.gethostname()))
  resfile.write("Run with a clock period of {0}\n".format(clkperiod));
  
  getstudents("names_bits.txt")
  print "student names"
  resfile.write("student names\n");
  for sx in students:
    print " ",sx.name,sx.last4
    resfile.write("  {0}  {1}\n".format(sx.name,sx.last4))
  getfiles("files_bits.txt")
  print "user design files"
  for sx in files:
    print " ",sx
  copyifneeded("sv_vcs","/home/morris/sfilt/sv_vcs")
  copyifneeded("sv_nc","/home/morris/sfilt/sv_nc")
  copyifneeded("sv_ncgates","/home/morris/sfilt/sv_ncgates")
  copyifneeded("design_ssc.csh","/home/morris/sfilt/design_ssc.csh")
  print "options syn {0} gates {1}".format(args.synthesis,args.gates)
  resfile.write( "options syn {0} gates {1}\n".format(args.synthesis,args.gates))
  if(not (args.synthesis or args.gates) ):
    runvcs(args.debug)
    runnc(args.debug)
  if( not (args.gates) ):
    runsynthesis(clkperiod)
  if( not (args.nogates) ):
    rungates(args.debug,clkperiod)
  if(args.synthesis or args.gates or args.nogates):
    resfile.write("--->> Partial run, do not submit for credit <<--\n")
    print "--->> Partial run, do not submit for credit <<--\n"
    resfile.close()
    exit()
  resfile.write("Completed the bits run\n")
  print("\n\n\nCompleted the bits run\n\n")
  resfile.close()

mainx()
