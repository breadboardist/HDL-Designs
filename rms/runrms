#!/usr/bin/python

import sys
import time
import os
import subprocess
import socket
import argparse
from string import find
from datetime import date

class student:
  def __init__(self):
    name=""
    last4=""

files = []
students = []
resfile=0

def getfnx():
  strx=raw_input("verilog file name with .v (enter if done) ").strip()
  return strx

def getfiles(fn):
  if(os.path.isfile(fn)):
    fs = open(fn,"r")
    for ln in fs.readlines():
      ln = ln.strip()
      if(len(ln) > 0):
        files.append(ln)
    fs.close()
  else:
    fs = open(fn,"w")
    print("\n\nEnter the file names in descending hierarchy order.")
    while(True):
      strx = getfnx()
      if(strx==""):
        break
      fs.write("{0}\n".format(strx))
      files.append(strx)
    fs.close()
    
def getstudents(fn):
  if(os.path.isfile(fn)):
    fs = open(fn,"r")
    for ln in fs.readlines():
      recs=ln.split("^")
      stud = student()
      stud.name=recs[1]
      stud.last4=recs[2]
      students.append(stud)
    fs.close()
  else:
    fs = open(fn,"w")
    namex = raw_input( "\n\nEnter student Name").strip()
    last4 = raw_input("Enter the last 4 of the SJSU ID ").strip()
    fs.write("^{0}^{1}^\n".format(namex,last4))
    stud = student()
    stud.name = namex
    stud.last4 = last4
    students.append(stud)
    fs.close()

###############################
# copies a file if needed     #
###############################
def copyifneeded(localfile,remotefile):
  if(os.path.isfile(localfile)):
    return
  print("\nCopying {0} to local directory".format(str(localfile)))
  cmd = ["cp", str(remotefile), str(localfile) ]
  subprocess.call(cmd)
####################################
# checks to see if a file contains #
# any substrings passed            #
####################################
def filehasany(fn,stx):
  rv = False
  if(os.path.isfile(fn)):
    fw = open(fn,"r")
    for ln in fw.readlines():
      for sub in stx:
        if( find(ln.lower(),sub)>= 0 ):
          print "-->",ln.strip(),"<--"
          rv=True
  return rv

###############################
# checks to see if a file has #
# a string                    #
###############################
def filehas(fn,stx):
  if(os.path.isfile(fn)):
    fw = open(fn,"r")
    for ln in fw.readlines():
      if( find(ln,stx)>=0 ):
        print "-->",ln.strip(),"<--"
        fw.close()
        return True
    fw.close()
  return False
##############################
# run vcs simulation         #
##############################
def runvcs(debopt):
  ff = open("files.f","w")
  ff.write("trms.v\n")
  for lx in reversed(files):
    ff.write("{0}\n".format(lx))
  ff.close()
  deb=1 if(debopt) else 0
  
  subprocess.call(["rm","-rf","simres.txt","simv"])
  subprocess.call(["csh","-c","./sv_dw -f files.f | tee simres.txt"])
  if(filehas("simres.txt","You are a wise and learned one... You passed the humble test")):
    if(debopt):
      resfile.write("debug {0} \n".format(debopt))
    resfile.write("VCS simulation worked\n");
    print "\n\n\n------ VCS simulation worked \n\n\n"
  else:
    resfile.write("VCS FAILED TO WORK\n")
    print "\n\n\nVCS Failed to work\n\n"
    resfile.close()
    exit()
##############################
# run ncverilog simulation   #
##############################
def runnc(debopt):
  ff = open("files.f","w")
  ff.write("trms.v\n")
  for lx in reversed(files):
    ff.write("{0}\n".format(lx))
  ff.close()
  deb=1 if(debopt) else 0
  print "\n\n    Starting NC verilog \n\n"
  subprocess.call(["rm","-rf","simres.txt"])
  subprocess.call(["csh","-c","./sv_nc -f files.f | tee simres.txt"])
  if(filehas("simres.txt","You are a wise and learned one... You passed the humble test")):
    if(debopt):
      resfile.write("debug {0} \n".format(debopt))
    resfile.write("NCverilog simulation worked\n");
    print "\n\n\n------ NCverilog simulation worked \n\n\n"
  else:
    resfile.write("NCverilog FAILED TO WORK\n")
    print "\n\n\nNCVerilog failed to work\n\n"
    resfile.close()
    exit()
##############################
# run ncverilog gate sim     #
##############################
def rungates(debopt,clkperiod):
  ff = open("files.f","w")
  ff.write("tbsfilt.sv\nsfilt_gates.v")
  ff.close()
  deb=1 if(debopt) else 0
  maketb("tbsfilt.sv",deb,True,clkperiod*2.5)
  print "\n\n    Starting NC verilog gate level simulation\n\n"
  subprocess.call(["rm","-rf","simres.txt"])
  subprocess.call(["csh","-c","./sv_ncgates -f files.f | tee simres.txt"])
  if(filehas("simres.txt","We passed the test, happy happy :)")):
    if(debopt):
      resfile.write("debug {0}\n".format(debopt))
    resfile.write("Gate level simulation worked\n");
    print "\n\n\n------ Gate level simulation worked \n\n\n"
  else:
    resfile.write("Gates FAILED TO WORK\n")
    print "\n\n\nGates failed to work\n\n"
    resfile.close()
    exit()
#####################################
# makes a synthesis script of the things
#####################################
def makeSynScript(fn,clkx):
  clkperiod = float(clkx);
  fs = open(fn,"w")
  fs.write("""set link_library {/apps/toshiba/sjsu/synopsys/tc240c/tc240c.db_NOMIN25 /apps/synopsys/I-2013.12-SP5/libraries/syn/dw_foundation.sldb}
set target_library {/apps/toshiba/sjsu/synopsys/tc240c/tc240c.db_NOMIN25}
""")
  for fnx in reversed(files):
    if(not (find(fnx,"DW")>=0) ):
      print("--> {0} <<-- {1}\n".format(fnx,find(fnx,"DW")) )
      fs.write("read_verilog {0}\n".format(fnx))
      fs.write("create_clock clk -name clk -period {0}\n".format(clkperiod*0.75))
      fs.write("""set_propagated_clock clk
set_clock_uncertainty 0.25 clk
set_propagated_clock clk
set_output_delay 0.5 -clock clk [all_outputs]
set all_inputs_wo_rst_clk [remove_from_collection [remove_from_collection [all_inputs] [get_port clk]] [get_port rst]]
set_driving_cell -lib_cell CND2X1 $all_inputs_wo_rst_clk
set_input_delay 0.6 -clock clk $all_inputs_wo_rst_clk
set_output_delay 0.6 -clock clk [all_outputs]
set_fix_hold [ get_clocks clk ]
""")
      fs.write("set_output_delay 0.3 -clock clk [all_outputs]\n")
      fs.write("set_wire_load_model -name T8G00TW8\n")
      fs.write("compile_ultra\n")
      fs.write("create_clock clk -name clk -period {0}\n".format(clkperiod))
      fs.write("""
update_timing
report_timing -max_paths 3
""")
  fs.write("""write -hierarchy -format verilog -output rms_gates.v
""")
  fs.write("quit\n")
  fs.close()
    
#####################################
# run the synopsys synthesizer      #
#####################################
def runsynthesis(clkperiod):
  makeSynScript("synthesis.script",clkperiod)
  fq = open("sss","w")
  fq.write("""#!/usr/bin/csh
source design_ssc.csh
which dc_shell
dc_shell -f synthesis.script | tee synres.txt
""")
  fq.close()
  subprocess.call(["chmod","+x","sss"])
  subprocess.call(["rm","-f","synres.txt"])
  subprocess.call(["./sss"])
  if( not os.path.isfile("synres.txt") ):
    resfile.write("///// Synthesis failed to produce results /////\n")
    print "\n\nNo synthesis results\n\n"
    exit()
  if( filehasany("synres.txt",["error","latch","violated","timing arc"]) ):
    resfile.write("///// Synthesis failed /////\n");
    print "\n\nsynthesis failed\n\n"
    exit()
  resfile.write("Synthesis finished OK\n")
####################################
# The main routine                 #
####################################
def mainx():
  clkperiod=4.0
  resfn="results.txt"

  parser = argparse.ArgumentParser(description='200/300 Mhz homework')
  parser.add_argument("-s","--synthesis",dest="synthesis",default=False,help="only run synthesis",action="store_true");
  parser.add_argument("--nogates",dest="nogates",default=False,help="No gate level simulation", action="store_true")
  parser.add_argument("-d","--debug",dest="debug",default=False,help="Debug mode",action="store_true")
  parser.add_argument("-g","--gates",dest="gates",default=False,help="just simulate gates",action="store_true")
  parser.add_argument("clkperiod",default=3.33)
  parser.add_argument("resultsFileName",default="results.txt")
  args = parser.parse_args()
  print args
#  return
  if(find(args.resultsFileName,".v")>0 or args.resultsFileName.find(".sv")>0):
    print("the second argument should be the result name\n")
    print("Not a design file name")
    return
  resfn=args.resultsFileName
  clkperiod=float(args.clkperiod)
  global resfile
  resfile = open(resfn,"w")
  resfile.write("runrms script run started on {0}\n".format(str(time.asctime())))
  resfile.write("run on machine {0}\n\n".format(socket.gethostname()))
  resfile.write("Run with a clock period of {0}\n".format(clkperiod));
  
  getstudents("names.txt")
  print "student names"
  resfile.write("student names\n");
  for sx in students:
    print " ",sx.name,sx.last4
    resfile.write("  {0}  {1}\n".format(sx.name,sx.last4))
  getfiles("files.txt")
  print "user design files"
  for sx in files:
    print " ",sx
  copyifneeded("sv_dw","/home/morris/rms/sv_dw")
  copyifneeded("sv_nc","/home/morris/rms/sv_nc")
  copyifneeded("sv_ncgates","/home/morris/rms/sv_ncgates")
  copyifneeded("design_ssc.csh","/home/morris/rms/design_ssc.csh")
  copyifneeded("trms.v","/home/morris/rms/trms.v")
  print "options syn {0} gates {1}".format(args.synthesis,args.gates)
  resfile.write( "options syn {0} gates {1}\n".format(args.synthesis,args.gates))
  if(not (args.synthesis or args.gates) ):
    runvcs(args.debug)
    runnc(args.debug)
  if( not (args.gates) ):
    runsynthesis(clkperiod)
  if( not (args.nogates) ):
    rungates(args.debug,clkperiod)
  if(args.synthesis or args.gates or args.nogates):
    resfile.write("--->> Partial run, do not submit for credit <<--\n")
    print "--->> Partial run, do not submit for credit <<--\n"
    resfile.close()
    exit()
  resfile.write("Completed the rms run\n")
  print("\n\n\nCompleted the rms run\n\n")
  resfile.close()

mainx()
